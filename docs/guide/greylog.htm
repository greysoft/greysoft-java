<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd">
<!--
Copyright 2010-2018 Yusef Badri - All rights reserved.
NAF is distributed under the terms of the GNU Affero General Public License, Version 3 (AGPLv3).
-->
<HTML>
<HEAD>
<TITLE>NAF - Programmer's Guide</TITLE>
<meta http-equiv="Content-Type" content="text/html;charset=UTF-8"/>
<link rel="stylesheet" type="text/css" href="naf.css"/>
</HEAD>
<BODY>

<div class="menu">
<p>
Programmer's Guide<br/>
GreyLog v${project.version}
</p>
<hr class="mline"/>
<p>
<a href="#overview">1&nbsp;-&nbsp;Overview</a>
</p>
<p>
<a href="#creation">2&nbsp;-&nbsp;Logger Creation</a>
</p>
<p>
<a href="#config">3&nbsp;-&nbsp;Configuration</a>
</p>
<p>
<a href="#extmap">4&nbsp;-&nbsp;Foreign&nbsp;Mappings</a>
</p>
<p>
<a href="#slf4j">5&nbsp;-&nbsp;Foreign&nbsp;Bindings</a>
</p>
<p>
<a href="../../NOTICE.txt">COPYRIGHT</a>
</p>
<p>
<a href="../../LICENCE.txt">LICENCE</a>
</p>
<hr class="mline"/>
<p>
<a href="index.htm">NAF Guide</a>
</p>
</div>

<div class="page">
<table class="chtitle" width="100%">
<tr><td>
<center>
GreyLog Logging Framework
</center>
</td></tr>
</table>

<h2>
<a name="overview">
1 - Overview
</a>
</h2>

<p>
<span class="softname">GreyLog</span>
is a fully configurable, high performance logging framework, which contains particular optimisations to support 8-bit charsets (ie. the vast majority) and single-threaded mode (ie. a typical NAF context).
<br/> <br/>
GreyLog is part of the
<span class="softname">NAF</span>
suite, but it has no dependency on NAF's reactor core and is suitable for use by non-NAF applications,
whether invoked directly or via facades like SLF4J or JCL.
<br/>
It consists of the
<span class="compcode">com.grey.logging</span>
Java package.
</p>

<hr class="pline"/>
<h2>
<a name="creation">
2 - Creation
</a>
</h2>

<p>
GreyLog loggers are created by the
<span class="compcode">com.grey.logging.Factory</span> class, which provides a number of
<span class="compcode">getLogger()</span> factory methods, depending on context.
<br/>
GreyLog utilises an XML config file which is generically termed the
<dfn>logging.xml</dfn>
file (though it's not necessarily called that) and which contains named entries, each of which specifies and defines a particular logger.

<br/> <br/>
If a logging.xml config file is not explicitly supplied to Factory.getLogger() then it looks for a default config on the following search path, stopping on the first match:<br/>
&bull; If the <span class="cfgname">grey.logger.configfile</span> system property is set, then it specifies the pathname.
<br/>
&bull; <span class="pathname">./logging.xml</span> (ie. look in current directory)
<br/>
&bull; <span class="pathname">./conf/logging.xml</span>
<br/>
&bull; <span class="pathname">$HOME/logging.xml</span>
<br/>
&bull; Look for it on the classpath as <span class="pathname">./logging.xml</span>.
<br/>
The logging.xml file is not absolutely required to exist, and generic defaults will be used if it is absent.

<br/> <br/>
It's also possible to explicitly bypass the use of the logging.xml config file by calling the
<span class="compcode">com.grey.logging.Parameters</span>
variant of
<span class="compcode">Factory.getLogger()</span>.

<br/> <br/>
Whether you supply a
<span class="compcode">Parameters</span>
object or a logging.xml config file to the logger factory, it takes all its default values from system properties.
<br>
See the
<span class="compcode">com.grey.logging.Parameters</span>
source code for a list of the system properties and the initialisation of its nested
<span class="compcode">Builder</span>
class for their default values.

<br/> <br/>
Note that all system properties can be transposed to the environment by upper-casing and replacing dots with hyphens.
<br>
eg. the system property
<dfn>grey.logger.level</dfn>
can be replaced by the environment variable
<dfn>GREY_LOGGER_LEVEL</dfn>
and if both are present, the environment takes precedence.
<br/>
This is in common with the treatment of system properties and environment variables throughout NAF.

<br/> <br/>
If the system property
<span class="cfgname">grey.logger.diagnostics</span>
is set to Yes, then verbose info on the process of creating the loggers will be printed to standard-output.
</p>

<hr class="pline"/>
<h2>
<a name="config">
3 - Configuration
</a>
</h2>

<p>
The example below illustrates the structure of the logging.xml config file, and the logger name specified in the
<span class="compcode">getLogger()</span> call is used to select the matching
<span class="cfgname">logger</span>
block.
</p>

<table class="cfgbox">
<tr><td>
<pre>
&lt;loggers&gt;
    &lt;logger name="default"&gt;
        &lt;file class="com.grey.logging.MTLatinLogger"&gt;%stdout%&lt;/file&gt;
    &lt;/logger&gt;
    &lt;logger name="mylogger1"&gt;
        &lt;file level="trc" rot="daily"&gt;%DIRLOG%/app.log&lt;/file&gt;
    &lt;/logger&gt;
    &lt;logger name="mylogger2"&gt;
        &lt;file maxfile="10M"&gt;app2.log&lt;/file&gt;
    &lt;/logger&gt;
&lt;/loggers&gt;
</pre>
</td></tr>
</table>

<p>
The value of the
<span class="cfgname">file</span>
element specifies the pathname of the output file, which is actually a template name in which the timestamp gets embedded.
It can also take the special values
<span class="cfgvalue">%stdout%</span> and
<span class="cfgvalue">%stderr%</span>,
which will direct logging output to the process's standard-output or standard-error instead.
<br/>
If it contains the special token
<span class="cfgvalue">%DIRLOG%</span>, that will be replaced by the value of the
<span class="cfgname">grey.logger.dir</span> system property.
<br/>
If it contains the special token
<span class="cfgvalue">%DIRTMP%</span>, that will be replaced by the value of
<span class="compcode">com.grey.base.config.SysProps.TMPDIR</span>.
<br/>
If it contains the special token
<span class="cfgvalue">%TID%</span>, that will be replaced by the Java thread ID
(<span class="compcode">Thread.currentThread().getId()</span>).
<br/><br/>

The attributes of the
<span class="cfgname">file</span>
elements are listed here:
</p>
<ul>
<li><span class="cfgtitle">class</span>:
This specifies the type of the logger, and defaults to
<span class="compcode">com.grey.logging.LatinLogger</span>,
which is a logger that may outperform others by avoiding the overhead of converting text to bytes based on the assumption that the log messages are all 8-bit charsets, and can be mapped to 1-to-1 to a byte stream.
<br/>
The other noteworthy logger is
<span class="compcode">com.grey.logging.CharLogger</span>,
which supports arbitrary text.
<br/>
<span class="compcode">LatinLogger</span> and <span class="compcode">CharLogger</span> are both single-threaded, so
<span class="compcode">MTLatinLogger</span> and <span class="compcode">MTCharLogger</span> are their MT-safe counterparts.
These are particularly recommended for the
<span class="cfgvalue">default</span>
logger, as it may potentially be used by multiple threads.
<br/>
You can also nominate your own custom logger.
It must be a subclass of
<span class="compcode">com.grey.logging.Logger</span>, and provide a constructor with this signature:<br/>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;
<span class="compcode">classname(Parameters, String logname)</span>.
</li>

<li><span class="cfgtitle">level</span>:
This specifies the output verbosity, and takes the following values:
<span class="cfgvalue">ERR</span>,
<span class="cfgvalue">WARN</span>,
<span class="cfgvalue">INFO</span>,
<span class="cfgvalue">TRC</span>,
<span class="cfgvalue">TRC2</span>,
<span class="cfgvalue">TRC3</span>,
<span class="cfgvalue">TRC4</span>,
<span class="cfgvalue">TRC5</span>.
<br/>Defaults to INFO.
</li>

<li><span class="cfgtitle">rot</span>:
This specifies the logfile rotation frequency, and takes the following values:
<span class="cfgvalue">NEVER</span>,
<span class="cfgvalue">HOURLY</span>,
<span class="cfgvalue">DAILY</span>,
<span class="cfgvalue">WEEKLY</span>,
<span class="cfgvalue">MONTHLY</span>,
<span class="cfgvalue">YEARLY</span>.
<br/>
Defaults to NEVER (ie. same logfile will remain in use).
<br/>
If the rotation frequency is less than Daily, then logfile messages will be timestamped with the date as well as the time-of-day.
<br/>
For WEEKLY rotation, the logfiles will be named after the first day of the week.
</li>

<li><span class="cfgtitle">maxfile</span>:
This is an alternative logfile-rotation setting, and indicates an upper limit on the file size, upon reaching which it will be rotated.
<br/>
This defaults to zero, but if set it overrides the
<span class="cfgname">rot</span> attribute.
</li>

<li><span class="cfgtitle">buffer</span>:
This specifies the size of the output file buffer, and defaults to 8K.
</li>

<li><span class="cfgtitle">flush</span>:
This controls the frequency with which the buffer is explicitly flushed (it flushes automatically whenever it's full), and defaults to zero, which means never.
</li>

<li><span class="cfgtitle">delta</span>:
This is a boolean attribute, and if set to Yes, the logger will display the incremental time (in milliseconds) since the last log message, after each message's timestamp.
</li>

<li><span class="cfgtitle">tid</span>:
This is a boolean attribute, and if set to Yes (which is the default), the logger will include the thread ID in the standard prefix it constructs for each log message.
<br/>
It will also append the thread name
(<span class="compcode">Thread.currentThread().getName()</span>) unless the system property
<span class="cfgname">grey.logger.threadname</span>
is explicitly set to No.
</li>
</ul>

<hr class="pline"/>
<h2>
<a name="extmap">
4 - Foreign Mappings
</a>
</h2>

<p>
This section describes how GreyLog instances can be redirected to external facades, such as SLF4J, JCL and JUL.
<br/> <br/>
Redirection is based on the logging.xml
<span class="cfgname">class</span>
attribute described above:
<br/>
&bull;
<span class="cfgvalue">class="com.grey.logging.adapters.AdapterSLF4J"</span>:
Creates an SLF4J logger with the same name as the GreyLog logger.
<br/>
&bull;
<span class="cfgvalue">class="com.grey.logging.adapters.AdapterJCL"</span>:
Creates a JCL logger with the same name as the GreyLog logger.
<br/> <br/>
The net effect is that the calling code will still be using a GreyLog logger instance
(ie. of type <span class="compcode">com.grey.logging.Logger</span>)
but all log messages will be forwarded to the external SLF4J or JCL logger.
<br/>
If you already manage and configure all your logging via another framework, this allows GreyLog users to tap into that without changing any Java code.
Simply modify the
<span class="pathname">logging.xml</span>
config file (or specify the logger class via the
<span class="compcode">-Dgrey.logger.class</span>
system property, or
<span class="compcode">GREY_LOGGER_CLASS</span>
environment variable) and the GreyLog logger becomes part of the external logging framework.
</p>

<hr class="pline"/>
<h2>
<a name="slf4j">
5 - Foreign Bindings
</a>
</h2>

<p>
This section is the reverse of the above, and describes how external facades such as SLF4J, JCL and JUL can be redirected to GreyLog.
<br/>
As such, this is not relevant to NAF, which invokes the GreyLog framework directly, but it allows GreyLog to be transparently plugged into non-NAF code, or any code which doesn't have static (compile-time) bindings to GreyLog.

<br/> <br/>
While the GreyLog framework itself has nothing to do with
<span class="softname">SLF4J</span>,
it includes an adapter library
(see the
<span class="softname">greylog-slf4j</span>
Maven project)
which enables it to act as an underlying logger for SLF4J.
<br/>
Simply put the greylog-slf4j JAR on your classpath ahead of any other SLF4J bindings, and all instantiations of SLF4J loggers will be redirected to the GreyLog framework.
<br/>
That is, calls to
<span class="compcode">org.slf4j.LoggerFactory.getLogger(name)</span>
will get mapped to
<span class="compcode">com.grey.logging.Factory.getLogger(name)</span>
and as explained above, that will load the default
<dfn>logging.xml</dfn>
file.

<br/><br/>
Applications based on Commons Logging (JCL) can bind to the GreyLog framework by including the
<span class="softname">jcl-over-slf4j</span>
and
<span class="softname">slf4j-api</span>
JARs on their classpath, in addition to the
<span class="softname">greylog-slf4j</span>
JAR.

<br/><br/>
Applications based on the JDK's built-in JUL
(<span class="compcode">java.util.logging</span>)
framework can bind to the GreyLog framework by including the
<span class="softname">jul-to-slf4j</span>
and
<span class="softname">slf4j-api</span>
JARs on their classpath, in addition to the
<span class="softname">greylog-slf4j</span>
JAR.
</p>

<br/><br/>
</div>
</BODY>
</HTML>
