<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd">
<HTML>
<HEAD>
<TITLE>NAF - Programmer's Guide</TITLE>
<link rel="stylesheet" type="text/css" href="naf.css"/>
</HEAD>
<BODY>

<div class="menu">
<p>
Programmer's Guide<br/>
GreyLog v1.3.0
</p>
<hr class="mline"/>
<p>
<a href="#overview">1&nbsp;-&nbsp;Overview</a>
</p>
<p>
<a href="#config">2&nbsp;-&nbsp;Configuration</a>
</p>
<p>
<a href="#extmap">3&nbsp;-&nbsp;Foreign&nbsp;Mappings</a>
</p>
<p>
<a href="#slf4j">4&nbsp;-&nbsp;Foreign&nbsp;Bindings</a>
</p>
<p>
<a href="../../NOTICE.txt">COPYRIGHT</a>
</p>
<p>
<a href="../../LICENCE.txt">LICENCE</a>
</p>
<hr class="mline"/>
<p>
<a href="index.htm">NAF Guide</a>
</p>
</div>

<div class="page">
<table class="chtitle" width="100%">
<tr><td>
<center>
GreyLog Logging Framework
</center>
</td></tr>
</table>

<h2>
<a name="overview">
1 - Overview
</a>
</h2>

<p>
<span class="softname">GreyLog</span>
is a fully configurable, high performance logging framework, which contains particular optimisations to support 8-bit charsets (ie. the vast majority) and single-threaded mode.
<br/>
It consists of the
<code>com.grey.logging</code>
Java package.
<br/> <br/>
GreyLog differs from
<span class="softname">Log4j12</span>, <span class="softname">JUL</span> (<code>java.util.logging</code>)
and other logging frameworks, in that its loggers really are logfile streams, and not merely formatting handlers that cascade into a single actual logger.
This means that care has to be taken when instantiating GreyLog loggers via
external interfaces such as
<span class="softname">SLF4J</span>
or
<span class="softname">JCL</span> (Apache Commons Logging).
<br/>
SLF4J and JCL are biased towards Log4j12 and JUL, and developers typically expect to call
<code>org.slf4j.LoggerFactory.getLogger()</code>
or
<code>org.apache.commons.logging.LogFactory.getLog()</code>
in every module, using a different name each time, without actually creating multiple I/O streams.
<br/>
In the case of GreyLog, this would result in multiple logfile streams which is probably not what you intended, so the required loggers need to be created in one place and then made available (as is the case with the
<code>Dispatcher.logger</code>
field provided by NAF).
<br/> <br/>
GreyLog is part of the
<span class="softname">NAF</span>
suite, but it has no dependency on NAF's reactor core and is suitable for use by non-NAF applications,
whether invoked directly or via facades like SLF4J or JCL.
</p>

<hr class="pline"/>
<h2>
<a name="config">
2 - Configuration
</a>
</h2>

<p>
GreyLog loggers are created by the
<code>com.grey.logging.Factory</code> class, which provides a number of
<code>getLogger()</code> factory methods.
<br/>
All of them are based on a config file which is generically termed the
<dfn>logging.xml</dfn>
file (though it's not necessarily called that) and contains named entries, each of which specifies and defines a particular logger.
<br/>
If you call a <code>getLogger()</code> variant that doesn't specify a config file, then the global default logging.xml file is used.
<br/>
If you call a <code>getLogger()</code> variant that doesn't specify a named logger (or you specify a blank or null name), then a special logging.xml entry called the
<span class="cfgvalue">default</span>
logger is used.
The <span class="cfgvalue">default</span> entry need not exist (though it is recommended that you do define it) and if it doesn't GreyLog will create a logger with default settings, which can be influenced by system properties (see the default constructor in the
<code>com.grey.logging.Parameters</code>
source code), but is typically the standard-output stream.
<br/>
If you specify a named logger other than <span class="cfgvalue">default</span>, and it doesn't exist in the logging.xml file, then a
<code>SinkLogger</code> instance is returned, which silently discards all messages written to it.

<br/> <br/>
The first time the GreyLog framework tries to access the default <dfn>logging.xml</dfn> config file, it looks for it on the following search path, stopping on the first match:<br/>
&bull; If the <span class="cfgname">grey.logger.configfile</span> system property is set, then it specifies the pathname.
<br/>
&bull; <span class="pathname">./logging.xml</span> (ie. look in current directory)
<br/>
&bull; <span class="pathname">./conf/logging.xml</span>
<br/>
&bull; <span class="pathname">$HOME/logging.xml</span>
<br/>
&bull; Look for it on the classpath as <span class="pathname">./logging.xml</span>.
<br/>
If still not found, then <code>getLogger()</code> calls will treat all requested loggers as non-existent, so as described above, any logger other than <span class="cfgvalue">default</span> will get mapped to the <code>SinkLogger</code>.

<br/> <br/>
The example below illustrates the structure of the logging.xml config file, and the logger name specified in the
<code>getLogger()</code> call is used to select the matching
<span class="cfgname">logger</span>
block.
</p>

<table class="cfgbox">
<tr><td>
<pre>
&lt;loggers&gt;
    &lt;logger name="default"&gt;
        &lt;file class="com.grey.logging.MTLatinLogger"&gt;%stdout%&lt;/file&gt;
    &lt;/logger&gt;
    &lt;logger name="mylogger1"&gt;
        &lt;file level="trc" rot="daily"&gt;%DIRLOG%/app.log&lt;/file&gt;
    &lt;/logger&gt;
    &lt;logger name="mylogger2"&gt;
        &lt;file maxfile="10M"&gt;app2.log&lt;/file&gt;
    &lt;/logger&gt;
&lt;/loggers&gt;
</pre>
</td></tr>
</table>

<p>
The value of the
<span class="cfgname">file</span>
element specifies the pathname of the output file, which is actually a template name in which the timestamp gets embedded.
It can also take the special values
<span class="cfgvalue">%stdout%</span> and
<span class="cfgvalue">%stderr%</span>,
which will direct logging output to the process's standard-output or standard-error instead.
<br/>
If it contains the special token
<span class="cfgvalue">%DIRLOG%</span>, that will be replaced by the value of the
<span class="cfgname">grey.logger.dir</span> system property.
<br/>
If it contains the special token
<span class="cfgvalue">%DIRTMP%</span>, that will be replaced by the value of
<code>com.grey.base.config.SysProps.TMPDIR</code>.
<br/>
If it contains the special token
<span class="cfgvalue">%TID%</span>, that will be replaced by the Java thread ID
(<code>Thread.currentThread().getId()</code>).
<br/><br/>

The attributes of the
<span class="cfgname">file</span>
elements are shown below.
<br/>
The default values for all these config attributes are determined via system properties. See the
<code>com.grey.logging.Parameters</code>
source code.
</p>
<ul>
<li><span class="cfgtitle">class</span>:
This specifies the type of the logger, and defaults to
<code>com.grey.logging.LatinLogger</code>,
which is a logger that may outperform others by avoiding the overhead of converting text to bytes based on the assumption that the log messages are all 8-bit charsets, and can be mapped to 1-to-1 to a byte stream.
<br/>
The other noteworthy logger is
<code>com.grey.logging.CharLogger</code>,
which supports arbitrary text.
<br/>
<code>LatinLogger</code> and <code>CharLogger</code> are both single-threaded, so
<code>MTLatinLogger</code> and <code>MTCharLogger</code> are their MT-safe counterparts.
These are particularly recommended for the
<span class="cfgvalue">default</span>
logger, as it may potentially be used by multiple threads.
<br/>
You can also nominate your own custom logger.
It must be a subclass of
<code>com.grey.logging.Logger</code>, and provide a constructor with this signature:<br/>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;
<code>classname(Parameters, String logname)</code>.
</li>

<li><span class="cfgtitle">level</span>:
This specifies the output verbosity, and takes the following values:
<span class="cfgvalue">ERR</span>,
<span class="cfgvalue">WARN</span>,
<span class="cfgvalue">INFO</span>,
<span class="cfgvalue">TRC</span>,
<span class="cfgvalue">TRC2</span>,
<span class="cfgvalue">TRC3</span>,
<span class="cfgvalue">TRC4</span>,
<span class="cfgvalue">TRC5</span>.
<br/>Defaults to INFO.
</li>

<li><span class="cfgtitle">rot</span>:
This specifies the logfile rotation frequency, and takes the following values:
<span class="cfgvalue">NEVER</span>,
<span class="cfgvalue">HOURLY</span>,
<span class="cfgvalue">DAILY</span>,
<span class="cfgvalue">WEEKLY</span>,
<span class="cfgvalue">MONTHLY</span>,
<span class="cfgvalue">YEARLY</span>.
<br/>
Defaults to NEVER (ie. same logfile will remain in use).
<br/>
If the rotation frequency is less than Daily, then logfile messages will be timestamped with the date as well as the time-of-day.
<br/>
For WEEKLY rotation, the logfiles will be named after the first day of the week.
</li>

<li><span class="cfgtitle">maxfile</span>:
This is an alternative logfile-rotation setting, and indicates an upper limit on the file size, upon reaching which it will be rotated.
<br/>
This defaults to zero, but if set it overrides the
<span class="cfgname">rot</span> attribute.
</li>

<li><span class="cfgtitle">buffer</span>:
This specifies the size of the output file buffer, and defaults to 8K.
</li>

<li><span class="cfgtitle">flush</span>:
This controls the frequency with which the buffer is explicitly flushed (it flushes automatically whenever it's full), and defaults to zero, which means never.
</li>

<li><span class="cfgtitle">delta</span>:
This is a boolean attribute, and if set to Yes, the logger will display the incremental time (in milliseconds) since the last log message, after each message's timestamp.
</li>

<li><span class="cfgtitle">tid</span>:
This is a boolean attribute, and if set to Yes (which is the default), the logger will include the thread ID in the standard prefix it constructs for each log message.
<br/>
It will also append the thread name
(<code>Thread.currentThread().getName()</code>) unless the system property
<span class="cfgname">grey.logger.threadname</span>
is explicitly set to No.
</li>
</ul>

<p>
If the system property
<span class="cfgname">grey.logger.diagnostics</span>
is set to Yes, then progress messages on the search for the
<dfn>logging.xml</dfn> file and the process of creating a logger will be printed to the process's standard-output.
<br/> <br/>
If the system property
<span class="cfgname">grey.logger.sinkstdio</span>
is set to Yes, then instead of missing loggers (ie. specified name not found in logging.xml file) being mapped to the SinkLogger, they will be mapped to a logger with default settings, ie. the same type of logger that would be created for a missing
<span class="cfgvalue">default</span> logger (which as explained above, is typically on stdout).
<br/>
This can be useful if you don't want to lose any logging output regardless of your logging.xml config.
</p>

<hr class="pline"/>
<h2>
<a name="extmap">
3 - Foreign Mappings
</a>
</h2>

<p>
This section describes how GreyLog instances can be redirected to external facades, such as SLF4J, JCL and JUL.
<br/> <br/>
Redirection is based on the logging.xml
<span class="cfgname">class</span>
attribute described above:
<br/>
&bull;
<span class="cfgvalue">class="com.grey.logging.adapters.AdapterSLF4J"</span>:
Creates an SLF4J logger with the same name as the GreyLog logger.
<br/>
&bull;
<span class="cfgvalue">class="com.grey.logging.adapters.AdapterJCL"</span>:
Creates a JCL logger with the same name as the GreyLog logger.
<br/> <br/>
The net effect is that the calling code will still have a GreyLog logger instance
(ie. of type <code>com.grey.logging.Logger</code>)
but all log messages will be forwarded to the external logger.
<br/>
If you already manage and configure all your logging via another framework, this allows GreyLog users to tap into that without changing any Java code.
Simply modify the logging.xml and the GreyLog logger joins the external logging framework.
</p>

<hr class="pline"/>
<h2>
<a name="slf4j">
4 - Foreign Bindings
</a>
</h2>

<p>
This section is the reverse of the above, and describes how external facades such as SLF4J, JCL and JUL can be redirected to GreyLog.
<br/>
As such, this is not relevant to NAF, which invokes the GreyLog framework directly, but it allows GreyLog to be transparently plugged into non-NAF code, or any code which doesn't have static (compile-time) bindings to GreyLog.

<br/> <br/>
While the GreyLog framework itself has nothing to do with
<span class="softname">SLF4J</span>,
it includes an adapter library
(see the
<span class="softname">greylog-slf4j</span>
Maven project)
which enables it to act as underlying logger for SLF4J.
<br/>
Simply put the greylog-slf4j JAR on your classpath ahead of any other SLF4J bindings, and all instantiations of SLF4J loggers will be redirected to the GreyLog framework.
<br/>
That is, calls to
<code>org.slf4j.LoggerFactory.getLogger(name)</code>
will get mapped to
<code>com.grey.logging.Factory.getLogger(name)</code>
and as explained above, that will load the default
<dfn>logging.xml</dfn>
file.

<br/><br/>
Applications based on Commons Logging (JCL) can bind to the GreyLog framework by including the
<span class="softname">jcl-over-slf4j</span>
and
<span class="softname">slf4j-api</span>
JARs on their classpath, in addition to the
<span class="softname">greylog-slf4j</span>
JAR.

<br/><br/>
Applications based on the JDK's built-in JUL
(<code>java.util.logging</code>)
framework can bind to the GreyLog framework by including the
<span class="softname">jul-to-slf4j</span>
and
<span class="softname">slf4j-api</span>
JARs on their classpath, in addition to the
<span class="softname">greylog-slf4j</span>
JAR.
</p>

<br/><br/>
</div>
</BODY>
</HTML>
